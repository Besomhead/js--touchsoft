var config={operatorName:"Operator",chatURL:"https://besomhead-chat.firebaseio.com/",requests:"fetch"},messageFactory=function(){function e(){}function a(e,t,n){var a,r,s;this.day=e.getDate(),this.month=e.getMonth(),this.time=(r=(a=e).getHours(),s=a.getMinutes(),(r<10?"0":"").concat(r.toString()).concat(":").concat(s<10?"0":"").concat(s.toString())),this.sender=t,this.body=n}function r(e,t,n){this.date=e.toLocaleString(),this.type=t,this.params=n,this.shown=!1}return e.prototype.getMessage=function(e,t,n){return new a(e,t,n)},e.prototype.getCommandMessage=function(e,t,n){return new r(e,t,n)},new e}(),DM=function(){function e(){}return e.prototype.getDOMElement=function(e){return"string"==typeof e?document.getElementById(e):e},e.prototype.getDOMChildrenByTag=function(e,t){return Array.from(this.getDOMElement(e).getElementsByTagName(t))},e.prototype.getDOMChildrenByClass=function(e,t){return Array.from(DM.getDOMElement(e).getElementsByClassName(t))},e.prototype.createDOMElement=document.createElement.bind(document),e.prototype.appendDOMElement=function(e,t){DM.getDOMElement(e).appendChild(t)},e.prototype.removeDOMElement=function(e,t){DM.getDOMElement(e).removeChild(DM.getDOMElement(t))},e.prototype.addListener=function(e,t,n){DM.getDOMElement(e).addEventListener(t,n)},e.prototype.removeListener=function(e,t,n){DM.getDOMElement(e).removeEventListener(t,n)},e.prototype.addCSSClass=function(t){Array.from(arguments).slice(1).forEach(function(e){DM.getDOMElement(t).classList.add(e)})},e.prototype.removeCSSClass=function(e,t){DM.getDOMElement(e).classList.remove(t)},new e}(),HTTP_GET="GET",HTTP_POST="POST",HTTP_PUT="PUT",REQUEST_FETCH="fetch",REQUEST_XHR="xhr",storageManager=function(l){function e(){}function M(e,t){var n={method:e,headers:{Accept:"application/json"}};return e!==HTTP_GET&&(n.body=JSON.stringify(t)),n}return e.prototype.getStoragePath=function(e){return l.chatURL+e+".json"},e.prototype.sendRequestToStorage=function(e,t,n){var a,r,s,o,d,i,c;return l.requests===REQUEST_FETCH?(d=e,i=t,c=n,a=fetch(storageManager.getStoragePath(d),M(i,c)).then(function(e){return e.json()}).then(function(e){return e})):l.requests===REQUEST_XHR&&(r=e,s=t,o=n,a=new Promise(function(e,t){var n=new XMLHttpRequest;n.open(s,storageManager.getStoragePath(r),!0),n.setRequestHeader("Accept","application/json"),n.setRequestHeader("Content-Type","application/json"),n.addEventListener("load",function(){e(JSON.parse(n.response))}),n.addEventListener("error",function(){t(n.statusText)}),n.send(JSON.stringify(o))})),a},e.prototype.getDataFromService=function(e){return fetch(e,M(HTTP_GET)).then(function(e){return e.json()}).then(function(e){return e})},new e}(config),updatesManager=function(){function e(){this.responseData=void 0}return e.prototype.getDataFromStorage=function(e){var t=new XMLHttpRequest;t.addEventListener("readystatechange",function(){var e=t.responseText;if(this.status&&this.responseText){if(e.lastIndexOf("event:")!==e.lastIndexOf("event: put"))return;window.postMessage(JSON.parse(e.slice(e.lastIndexOf("data:")+"data:".length,e.lastIndexOf("}")+1)),window.location)}}),t.open("GET",storageManager.getStoragePath(e),!0),t.setRequestHeader("Accept","text/event-stream"),t.send()},new e}(),dashboardFactory=function(v){var L,t,d="Вы",y=12e4,i="operators-dashboard-users-list-container",c="operators-dashboard-selected-user-container",H="operators-dashboard-selected-user-inner",o="operators-dashboard-user-chat-messages",l="operators-dashboard-user-chat-input",M="operators-dashboard-selected-user-control",a="operators-dashboard-selected-user-control-dialog",r="operators-dashboard-selected-user-control-dialog-input",e="https://ipinfo.io/",s="http://ip-api.com/",D="https://geoip-db.com/",u="dashboard-selected-user-commands-panel",m="operators-dashboard-command-select",p="operators-dashboard-command-",n="operators-dashboard-selected-user-param-",h=n+"1",f=n+"2",g=n+"3",w="operators-dashboard-selected-user-commands-log",O="dashboard-single-user-container",k="dashboard-single-user-container-unread",N="dashboard-user-status-online",B="dashboard-user-status-offline",E=-1,b=1,C={type:"",params:[]};function T(){}function S(){DM.removeDOMElement(c,H)}function P(e){return DM.getDOMChildrenByTag(e,"label").find(function(e){return e.hidden}).innerHTML}function U(e){var t=DM.getDOMElement(o),n=DM.createDOMElement("div"),a=DM.createDOMElement("div");n.innerHTML=e.sender,a.innerHTML=e.body,DM.appendDOMElement(t,n),DM.appendDOMElement(t,a)}function R(e){var t=DM.createDOMElement("fieldset"),n=DM.createDOMElement("legend"),a=DM.createDOMElement("div"),r=DM.createDOMElement("textarea"),s=DM.createDOMElement("button");return DM.addCSSClass(t,"dashboard-selected-user-chat-container"),n.innerHTML="Чат",a.id=o,DM.addCSSClass(a,"dashboard-selected-user-chat-messages"),r.id=l,DM.addCSSClass(r,"dashboard-selected-user-chat-input"),r.placeholder="Новое сообщение пользователю",DM.addCSSClass(s,"dashboard-selected-user-chat-button"),s.innerHTML="Send",DM.addListener(s,"click",function(e){var t,n=DM.getDOMElement(l).value;""!==n&&(t=messageFactory.getMessage(new Date,v.operatorName+":",n),DM.getDOMElement(l).value="",storageManager.sendRequestToStorage(P(e)+"/messages",HTTP_POST,t))}.bind(null,e)),DM.appendDOMElement(t,n),DM.appendDOMElement(t,a),DM.appendDOMElement(t,r),DM.appendDOMElement(t,s),t}function F(){DM.getDOMElement(a)&&DM.removeDOMElement(M,a)}function x(e){C.params[t]=e,F()}function q(e){var t=e.target;x(DM.getDOMChildrenByTag(t.parentNode,"label").find(function(e){return e.for===t.id}).innerHTML)}function _(e){var t=DM.createDOMElement("div"),n=DM.createDOMElement("label");return t.id=a,DM.addCSSClass(t,"dashboard-selected-user-control-dialog"),n.innerHTML=e,DM.appendDOMElement(t,n),DM.appendDOMElement(M,t),t}function j(){var t,n,a=DM.createDOMElement("div"),r=0;DM.addCSSClass(a,"dashboard-selected-user-control-dialog-options"),[e,s,D].forEach(function(e){(t=DM.createDOMElement("input")).type="radio",t.id="operators-dashboard-selected-user-control-dialog-option-"+ ++r,t.name="service",DM.addListener(t,"click",q),(n=DM.createDOMElement("label")).innerHTML=e,n.for=t.id,DM.appendDOMElement(a,t),DM.appendDOMElement(a,n)}),DM.appendDOMElement(_("What service do you want to use?"),a)}function A(e){var t,n=DM.createDOMElement("input"),a=DM.createDOMElement("button");F(),t=_(e),n.id=r,DM.addCSSClass(n,"dashboard-selected-user-control-dialog-input"),a.innerHTML="Save",DM.addCSSClass(a,"dashboard-selected-user-control-dialog-button"),DM.addListener(a,"click",function(){x(DM.getDOMElement(r).value)}),DM.appendDOMElement(t,n),DM.appendDOMElement(t,a)}function I(){A("What header do you want?")}function G(e){t=e}function J(e){DM.getDOMElement(f).disabled=!e,DM.getDOMElement(g).disabled=!e}function Q(e,t){DM.removeListener(h,"click",e),DM.addListener(h,"click",t)}function W(e){var t,n=(t=e.target,DM.getDOMChildrenByTag(t,"option").find(function(e){return e.selected})),a=n.id.slice(n.id.indexOf(p)+p.length);switch(F(),a){case"ask-user":C.type=a,J(!0),Q(j,I),DM.addListener(f,"click",A.bind(this,"What message do you want to show?")),DM.addListener(g,"click",A.bind(this,"What placeholder do you want?"));break;case"user-info":C.type=a,J(!1),Q(I,j);break;default:[h,f,g].forEach(function(e,t){var n=DM.getDOMElement(e),a=n.cloneNode();a.innerHTML=n.innerHTML,a.disabled=!1,a.addEventListener("click",G.bind(this,t)),n.parentNode.replaceChild(a,n)})}}function X(){storageManager.sendRequestToStorage(P(DM.getDOMElement(H))+"/commands",HTTP_POST,messageFactory.getCommandMessage(new Date,C.type,C.params)),C.params=[]}function Y(){var t,n,a,r,s,e=DM.createDOMElement("div"),o=DM.createDOMElement("button");return e.id=u,DM.addCSSClass(e,"dashboard-selected-user-commands-panel"),DM.addCSSClass(o,"dashboard-selected-user-run-button"),o.innerHTML="Run",DM.appendDOMElement(e,((n=DM.createDOMElement("select")).id=m,DM.addCSSClass(n,"dashboard-selected-user-command-select"),["Select command","User Info","Ask User"].forEach(function(e){(t=DM.createDOMElement("option")).id=p+e.toLowerCase().replace(" ","-"),t.innerHTML=e,DM.appendDOMElement(n,t)}),DM.addListener(n,"change",W),n)),a=e,s=0,[h,f,g].forEach(function(e){(r=DM.createDOMElement("button")).id=e,DM.addCSSClass(r,"dashboard-selected-user-param-button"),DM.addListener(r,"click",G.bind(this,s)),r.innerHTML="Param"+ ++s,DM.appendDOMElement(a,r)}),DM.appendDOMElement(e,o),DM.addListener(o,"click",X),e}function z(e,t){var n=DM.createDOMElement("div"),a=DM.createDOMElement("div"),r=DM.createDOMElement("div");n.innerHTML=t.date,a.innerHTML=t.type+' ("'+t.params.join('","')+'")',r.innerHTML=t.result,DM.appendDOMElement(e,n),DM.appendDOMElement(e,a),DM.appendDOMElement(e,r)}function K(e){var t,n,a,r=DM.createDOMElement("fieldset"),s=DM.createDOMElement("legend"),o=DM.createDOMElement("label"),d=DM.createDOMElement("label"),i=DM.createDOMElement("div");return r.id=M,DM.addCSSClass(r,"dashboard-selected-user-controller"),s.innerHTML="Control",o.innerHTML="Command:",o.for=u,d.for=w,d.innerHTML="Log:",i.id=w,DM.addCSSClass(i,"dashboard-selected-user-commands-log"),DM.appendDOMElement(r,s),DM.appendDOMElement(r,o),DM.appendDOMElement(r,Y()),DM.appendDOMElement(r,d),DM.appendDOMElement(r,i),t=i,n=P(e),(a=L[n].commands)&&Object.keys(a).forEach(function(e){a[e].result&&z(t,a[e])}),r}function V(e){storageManager.sendRequestToStorage(P(e)+"/read",HTTP_PUT,!0)}function Z(e){var t,n,a,r,s,o,d,i;e.target.classList.contains(O)&&(DM.getDOMElement(H)&&S(),DM.removeCSSClass(e.target,k),t=e.target,n=DM.createDOMElement("fieldset"),a=DM.createDOMElement("legend"),r=DM.createDOMElement("button"),s=DM.createDOMElement("label"),o=DM.createDOMElement("div"),n.id=H,DM.addCSSClass(n,"dashboard-selected-user-container-inner"),a.innerHTML="Active: "+DM.getDOMChildrenByTag(t,"label").shift().innerHTML,r.innerHTML="x",DM.addCSSClass(r,"dashboard-selected-user-container-button"),DM.addListener(r,"click",S),DM.addCSSClass(o,"dashboard-selected-user-controls-container"),s.innerHTML=P(t),s.hidden=!0,DM.appendDOMElement(o,R(t)),DM.appendDOMElement(o,K(t)),DM.appendDOMElement(n,a),DM.appendDOMElement(n,r),DM.appendDOMElement(n,o),DM.appendDOMElement(n,s),DM.appendDOMElement(c,n),d=e.target,(i=L[P(d)].messages)&&Object.keys(i).forEach(function(e){U(i[e])}),V(e.target))}function $(e,t,n){DM.removeCSSClass(e,t),DM.addCSSClass(e,n)}function ee(e,t){var n=DM.createDOMElement("div"),a=DM.createDOMElement("label"),r=DM.createDOMElement("label"),s=DM.createDOMElement("label"),o=DM.createDOMElement("div");return DM.addCSSClass(n,O),e.read||DM.addCSSClass(n,k),a.innerHTML=void 0===e.userName||e.userName===d?t:e.userName,r.innerHTML=t,r.hidden=!0,DM.addCSSClass(o,"dashboard-user-status"),!function(e){var t,n,a,r;if(!e.messages)return!1;for(r=Object.keys(e.messages),t=e.messages[r.pop()];t&&t.sender===v.operatorName.concat(":");)t=e.messages[r.pop()];return!!t&&(n=t.time.split(":"),a=new Date((new Date).getFullYear(),Number(t.month),Number(t.day),Number(n.shift()),Number(n.shift())),new Date-a<=y)}(e)?$(o,B,B):$(o,N,N),s.innerHTML=e.chatState,DM.appendDOMElement(n,a),DM.appendDOMElement(n,r),DM.appendDOMElement(n,o),DM.appendDOMElement(n,s),DM.addListener(i,"click",Z),DM.appendDOMElement(i,n),n}function te(e){var t=e||DM.getDOMChildrenByClass(i,O);return t.forEach(function(e){DM.removeDOMElement(i,e)}),t}function ne(e){var t=e.target.value.toLowerCase(),n=DM.getDOMChildrenByClass(i,O);if(""===t)return te(n),void dashboardFactory.loadUsersList(L);n.forEach(function(e){-1===DM.getDOMChildrenByTag(e,"label").shift().innerHTML.toLowerCase().indexOf(t)&&DM.removeDOMElement(i,e)})}function ae(e,t){return DM.getDOMChildrenByTag(e,"label").shift().innerHTML.toLowerCase()<DM.getDOMChildrenByTag(t,"label").shift().innerHTML.toLowerCase()?E:b}function re(e){return DM.getDOMChildrenByTag(e,"div").shift().classList.contains(N)?E:b}function se(e){return"chat-expanded"===DM.getDOMChildrenByTag(e,"label").pop().innerHTML?E:b}function oe(e){return e.classList.contains(k)?E:b}function de(e){var t=DM.getDOMChildrenByTag(e.target,"option").find(function(e){return e.selected}),n=te();function a(e){n.sort(e),n.forEach(function(e){DM.appendDOMElement(i,e)})}switch(t.innerHTML){case"User Name":a(ae);break;case"Online":a(re);break;case"Chat state":a(se);break;case"Unread":a(oe);break;default:dashboardFactory.loadUsersList(L)}}function ie(e){e.target.value="",te(),dashboardFactory.loadUsersList(L)}function ce(e){return L[e]||(L[e]={chatState:"chat-collapsed",read:"true"}),L[e]}function le(t,e){var n;return(n=DM.getDOMChildrenByClass(i,O).find(function(e){return P(e)===t}))||(n=ee(e,t)),n}function Me(e){var t,n,a,r,s,o,d,i,c,l,M,D,u,m,p,h,f,g,O,E,b=e.data.path.split("/").slice(1),C=b.shift(),T=e.data.data,S=!0;if(""===C)dashboardFactory.loadUsersList(T),L=T;else if(C.match(/user\d{13,}/)){switch(b.shift()){case"read":!0===T&&(S=!1),O=T,E=le(g=C,ce(g)),(L[g].read=O)?DM.removeCSSClass(E,k):DM.addCSSClass(E,k);break;case"chatState":h=T,f=le(p=C,ce(p)),L[p].chatState=h,DM.getDOMChildrenByTag(f,"label").pop().innerHTML=h;break;case"messages":-1!==T.sender.indexOf(v.operatorName)&&(S=!1),D=C,u=T,m=b.shift(),L[D].messages||(L[D].messages={}),L[D].messages[m]=u,DM.getDOMElement(H)&&P(H)===D&&(V(le(D,L[D])),U(u));break;case"userName":l=T,M=le(c=C,ce(c)),L[c].userName=l,DM.getDOMChildrenByTag(M,"label").shift().innerHTML=l;break;case"commands":if("result"!==(t=b.pop()))return o=t,d=T,(i=L[C]).commands||(i.commands={}),i.commands[o]=d,void(S=!1);S=!0,n=C,a=T,r=b.shift(),(s=L[n].commands)[r].result=a,DM.getDOMElement(H)&&P(H)===n&&z(DM.getDOMElement(w),s[r])}S&&function(e){var t=DM.getDOMChildrenByTag(le(e,L[e]),"div").shift();$(t,B,N),setTimeout($.bind(this,t,N,B),y)}(C)}}return T.prototype.loadUsersList=function(t){Object.keys(t).forEach(function(e){ee(t[e],e)})},T.prototype.initListeners=function(){DM.addListener("operators-dashboard-users-filter-bar","change",ne),DM.addListener("operators-dashboard-users-filter-bar","focus",ie),DM.addListener("operators-dashboard-users-sort-bar","change",de)},T.prototype.subscribeOnUpdates=function(){window.addEventListener("message",Me,!1),updatesManager.getDataFromStorage("")},new T}(config);window.addEventListener("load",function(){dashboardFactory.initListeners(),dashboardFactory.subscribeOnUpdates()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
