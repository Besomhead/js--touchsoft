var MARKUP_TIMEOUT=5e3,config={chatTitle:"Чат",chatState:"",userName:"",chatURL:"https://besomhead-chat.firebaseio.com/",cssClass:"chat-container",position:"right",allowMinimize:"true",allowDrag:"false",requireName:"false",showDateTime:"true",requests:"fetch",updates:"refetch",messagesLength:0,commandsLength:0},DM=function(){function e(){}return e.prototype.getDOMElement=function(e){return"string"==typeof e?document.getElementById(e):e},e.prototype.getDOMChildrenByTag=function(e,t){return Array.from(this.getDOMElement(e).getElementsByTagName(t))},e.prototype.getDOMChildrenByClass=function(e,t){return Array.from(DM.getDOMElement(e).getElementsByClassName(t))},e.prototype.createDOMElement=document.createElement.bind(document),e.prototype.appendDOMElement=function(e,t){DM.getDOMElement(e).appendChild(t)},e.prototype.removeDOMElement=function(e,t){DM.getDOMElement(e).removeChild(DM.getDOMElement(t))},e.prototype.addListener=function(e,t,n){DM.getDOMElement(e).addEventListener(t,n)},e.prototype.removeListener=function(e,t,n){DM.getDOMElement(e).removeEventListener(t,n)},e.prototype.addCSSClass=function(t){Array.from(arguments).slice(1).forEach(function(e){DM.getDOMElement(t).classList.add(e)})},e.prototype.removeCSSClass=function(e,t){DM.getDOMElement(e).classList.remove(t)},new e}(),messageFactory=function(){function e(){}function a(e,t,n){var a,s,o;this.day=e.getDate(),this.month=e.getMonth(),this.time=(s=(a=e).getHours(),o=a.getMinutes(),(s<10?"0":"").concat(s.toString()).concat(":").concat(o<10?"0":"").concat(o.toString())),this.sender=t,this.body=n}function s(e,t,n){this.date=e.toLocaleString(),this.type=t,this.params=n,this.shown=!1}return e.prototype.getMessage=function(e,t,n){return new a(e,t,n)},e.prototype.getCommandMessage=function(e,t,n){return new s(e,t,n)},new e}(),HTTP_GET="GET",HTTP_POST="POST",HTTP_PUT="PUT",REQUEST_FETCH="fetch",REQUEST_XHR="xhr",storageManager=function(d){function e(){}function l(e,t){var n={method:e,headers:{Accept:"application/json"}};return e!==HTTP_GET&&(n.body=JSON.stringify(t)),n}return e.prototype.getStoragePath=function(e){return d.chatURL+e+".json"},e.prototype.sendRequestToStorage=function(e,t,n){var a,s,o,r,c,i,u;return d.requests===REQUEST_FETCH?(c=e,i=t,u=n,a=fetch(storageManager.getStoragePath(c),l(i,u)).then(function(e){return e.json()}).then(function(e){return e})):d.requests===REQUEST_XHR&&(s=e,o=t,r=n,a=new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o,storageManager.getStoragePath(s),!0),n.setRequestHeader("Accept","application/json"),n.setRequestHeader("Content-Type","application/json"),n.addEventListener("load",function(){e(JSON.parse(n.response))}),n.addEventListener("error",function(){t(n.statusText)}),n.send(JSON.stringify(r))})),a},e.prototype.getDataFromService=function(e){return fetch(e,l(HTTP_GET)).then(function(e){return e.json()}).then(function(e){return e})},new e}(config),updatesManager=function(){function e(){this.responseData=void 0}return e.prototype.getDataFromStorage=function(e){var t=new XMLHttpRequest;t.addEventListener("readystatechange",function(){var e=t.responseText;if(this.status&&this.responseText){if(e.lastIndexOf("event:")!==e.lastIndexOf("event: put"))return;window.postMessage(JSON.parse(e.slice(e.lastIndexOf("data:")+"data:".length,e.lastIndexOf("}")+1)),window.location)}}),t.open("GET",storageManager.getStoragePath(e),!0),t.setRequestHeader("Accept","text/event-stream"),t.send()},new e}(),chatFactory=function(c){var o,t="chat-user-id",r="chat-collapsed",i="chat-expanded",d="chat",u="chat-messages",s="chat-input-box",l="chat-input-txt",m="chat-message-button",M="chat-toggle-button",g="[ ]",p="-",D=["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"],n=15e3,e="Вы",a="userName",h="chatState",f="messages",T="commands",E="read",S="chat-username-prompt-container",O="chat-username-prompt-input",v="chat-username-prompt-button",y=3e3,C=0,w="https://ipinfo.io/",L="http://ip-api.com/",b="https://geoip-db.com/";function H(){}function P(e){return localStorage.getItem(t)+"/"+e}function R(e){c.chatState=e,storageManager.sendRequestToStorage(P(h),HTTP_PUT,e)}function U(e,t){var n=DM.createDOMElement("div");n.innerHTML=t,DM.appendDOMElement(e,n)}function N(e,t){var n,a,s,o,r;n=d.concat("-").concat(t.day).concat("-").concat(t.month),null===DM.getDOMElement(n)&&((a=DM.createDOMElement("div")).id=n,DM.addCSSClass(a,"chat-messages-container"),"true"===c.showDateTime?(DM.addCSSClass(a,"chat-messages-container-with-time"),s=e,o=t,(r=DM.createDOMElement("legend")).innerHTML=o.day.toString().concat(" ").concat(D[+o.month]),DM.addCSSClass(r,"chat-day-of-month"),DM.appendDOMElement(s,r)):"false"===c.showDateTime&&DM.addCSSClass(a,"chat-messages-container-no-time"),DM.appendDOMElement(e,a)),a=DM.getDOMElement(n),"true"===c.showDateTime&&U(a,t.time),U(a,t.sender),U(a,t.body)}function q(t,n){var e=Object.keys(n);c.messagesLength=e.length,e.forEach(function(e){N(t,n[e])})}function _(){c.chatState!==r?storageManager.sendRequestToStorage(P(f),HTTP_GET,"").then(function(t){var e;setTimeout(_,n),t&&(e=Object.keys(t),c.messagesLength>=e.length||(e.slice(c.messagesLength).forEach(function(e){N(DM.getDOMElement(u),t[e])}),c.messagesLength=e.length))}):setTimeout(_,n)}function k(){var e;return"left"===c.position?e="chat-container-left":"right"===c.position&&(e="chat-container-right"),e}function x(e,t,n){var a=DM.createDOMElement("fieldset"),s=DM.createDOMElement("legend"),o=DM.createDOMElement("label"),r=DM.createDOMElement("input"),c=DM.createDOMElement("button");a.id=S,DM.addCSSClass(a,"chat-prompt-container",k()),s.innerHTML=e||"Имя",r.id=O,r.placeholder=n||"Имя пользователя",DM.addCSSClass(r,"chat-prompt-input"),o.for=r.id,o.innerHTML=t||"Пожалуйста, представьтесь:",c.id=v,DM.addCSSClass(c,"chat-prompt-button"),c.innerHTML="Сохранить",DM.appendDOMElement(a,s),DM.appendDOMElement(a,o),DM.appendDOMElement(a,r),DM.appendDOMElement(a,c),DM.appendDOMElement(d,a)}function F(e){DM.getDOMElement(l).disabled=!e,DM.getDOMElement(m).disabled=!e,null!==DM.getDOMElement(M)&&(DM.getDOMElement(M).disabled=!e)}function j(){storageManager.sendRequestToStorage(P(a),HTTP_GET,"").then(function(e){c.userName=e}),setTimeout(function(){null!==c.userName&&void 0!==c.userName&&""!==c.userName||("true"===c.requireName?(x(),F(!1),DM.addListener(v,"click",function(){var e=DM.getDOMElement(O).value;e.length<1||(c.userName=e,DM.removeDOMElement(d,S),F(!0),storageManager.sendRequestToStorage(P(a),HTTP_PUT,c.userName))})):(c.userName=e,storageManager.sendRequestToStorage(P(a),HTTP_PUT,c.userName)))},y)}function I(){var e,t,n=DM.getDOMElement(l);""!==n.value&&(e=messageFactory.getMessage(new Date,c.userName.concat(":"),n.value),n.value="",t=e,storageManager.sendRequestToStorage(P(f),HTTP_POST,t),storageManager.sendRequestToStorage(P(E),HTTP_PUT,!1))}function G(){var e,t,n,a;DM.removeCSSClass(d,r),DM.addCSSClass(d,i),"true"===c.allowMinimize&&(DM.getDOMElement(M).innerHTML=p),(e=DM.createDOMElement("div")).id=u,DM.addCSSClass(e,"chat-messages-external"),DM.appendDOMElement(d,e),o&&o.messages&&q(DM.getDOMElement(u),o.messages),t=DM.createDOMElement("div"),n=DM.createDOMElement("textarea"),a=DM.createDOMElement("button"),t.id=s,DM.addCSSClass(t,"chat-input-container"),n.id=l,DM.addCSSClass(n,"chat-input-textarea"),DM.appendDOMElement(t,n),a.id=m,DM.addCSSClass(a,"chat-message-button"),a.innerHTML="Отправить",DM.addListener(a,"click",I),DM.appendDOMElement(t,a),DM.appendDOMElement(d,t),""!==c.userName&&null!==c.userName&&void 0!==c.userName||j(),R(i)}function B(e,t){e.shown=!0,storageManager.sendRequestToStorage(P(T+"/"+t+"/shown"),HTTP_PUT,e.shown)}function A(e,t,n){storageManager.sendRequestToStorage(P(T+"/"+t+"/result"),HTTP_PUT,n)}function X(e,t){DM.getDOMElement(S)||(B(e,t),c.chatState===r&&G(),x.apply(this,e.params),DM.addListener(v,"click",function(){DM.getDOMElement(O).value&&(A(0,t,DM.getDOMElement(O).value),DM.removeDOMElement(d,S))}))}function J(e,t,n){storageManager.getDataFromService(e).then(function(e){A(0,n,JSON.stringify(e,null,2))})}function z(e,t){var n=e.params.shift();switch(B(e,t),n){case w:J(n);break;case L:J(n+"json");break;case b:J(n+"json/")}}function Q(e,t){var n;if(!e.shown){switch(e.type){case"user-info":n=z;break;case"ask-user":n=X}setTimeout(n.bind(this,e,t),C)}}function Y(e){var t,n=e.data.data,a=e.data.path,s=a.split("/").slice(1);if("/"===a){if((o=n).commands||(o.commands={}),c.chatState===r)return;return chatFactory.appendMessages(DM.getDOMElement(u),o.messages),void(o.commands&&Object.keys(o.commands).forEach(function(e){Q(o.commands[e],e)}))}switch(s.shift()){case f:if(-1!==(o.messages[s.shift()]=n).sender.indexOf(c.userName))return;if(c.chatState===r)return;N(DM.getDOMElement(u),n);break;case T:if(t=s.shift(),s.shift())return;Q(o.commands[t]=n,t)}}function K(){storageManager.sendRequestToStorage(P(T),HTTP_GET,"").then(function(t){var e;setTimeout(K,n),t&&(e=Object.keys(t),c.commandsLength>=e.length||(e.slice(c.commandsLength).forEach(function(e){Q(t[e],e)}),c.commandsLength=e.length))})}function V(){storageManager.sendRequestToStorage(P(h),HTTP_GET,"").then(function(e){c.chatState=e}),setTimeout(function(){null===c.chatState||void 0===c.chatState||""===c.chatState?R(r):c.chatState===i&&G(),DM.addCSSClass(d,c.chatState)},y)}function W(){switch(c.chatState){case r:G();break;case i:c.messagesLength=0,DM.removeCSSClass(d,i),DM.addCSSClass(d,r),DM.getDOMElement(M).innerHTML=g,DM.removeDOMElement(d,u),DM.removeDOMElement(d,s),R(r);break;default:throw new Error("Unexpected key/value pair: "+d+"/"+c.chatState)}}function Z(u){DM.addListener(u,"mousedown",function(e){var t,n,a,s=DM.getDOMElement(d),o={top:(t=s.getBoundingClientRect()).top+window.pageYOffset,left:t.left+window.pageXOffset},r=e.pageX-o.left,c=e.pageY-o.top;function i(e){s.style.left=e.pageX-r+"px",s.style.top=e.pageY-c+"px"}"BUTTON"!==e.target.tagName&&(n=function(e){i(e)},a=function(){DM.removeListener(document,"mousemove",n),DM.removeListener(u,"mouseup",a)},i(e),DM.addListener(document,"mousemove",n),DM.addListener(u,"mouseup",a))}),DM.addListener(u,"dragstart",function(){return!1})}return H.prototype.appendMessages=function(t,e){e?q(t,e):storageManager.sendRequestToStorage(P(f),HTTP_GET,"").then(function(e){e&&q(t,e)})},H.prototype.subscribeOnUpdates=function(){"refetch"===c.updates?(_(),K()):"longPolling"===c.updates&&(window.addEventListener("message",Y),updatesManager.getDataFromStorage(P("")))},H.prototype.appendStylesheet=function(){var e=DM.createDOMElement("link");e.rel="stylesheet",e.type="text/css",e.href="https://rawgit.com/Besomhead/js--touchsoft/besomhead-task07-build/task-07/Besomhead/build/css/chat_styles.css",DM.appendDOMElement(document.head,e)},H.prototype.createChatMarkup=function(){var e,t,n=DM.createDOMElement("fieldset"),a=DM.createDOMElement("legend"),s=DM.createDOMElement("div");n.id=d,DM.addCSSClass(n,"chat-container",k(),c.cssClass),a.innerHTML=c.chatTitle,DM.addCSSClass(a,"chat-legend"),n.appendChild(a),DM.addCSSClass(s,"chat-toggle-button-container"),"true"===c.allowDrag&&(DM.addCSSClass(s,"chat-toggle-button-container-drag"),Z(s)),"true"===c.allowMinimize?(e=s,t=DM.createDOMElement("button"),DM.addCSSClass(t,M),t.id=M,t.innerHTML=c.chatState===i?p:g,DM.addListener(t,"click",W),DM.appendDOMElement(e,t)):"false"===c.allowMinimize&&R(i),DM.appendDOMElement(n,s),DM.appendDOMElement(document.body,n),V()},H.prototype.setConfig=function(){var e,t,n=(e=document.currentScript.src).substr(e.indexOf("?")+1).split("&").reduce(function(e,t){var n=t.split("="),a=decodeURIComponent(n[1]);return e[decodeURIComponent(n[0])]=a.substr(1,a.length-2),e},{});Object.keys(n).forEach(function(e){""!==(t=n[e])&&(c[e]=t)})},H.prototype.setUniqueUserID=function(){null===localStorage.getItem(t)&&localStorage.setItem(t,"user".concat(Date.now().toString()))},new H}(config);window.addEventListener("load",function(){chatFactory.appendStylesheet(),chatFactory.setUniqueUserID(),chatFactory.createChatMarkup(),setTimeout(chatFactory.subscribeOnUpdates,MARKUP_TIMEOUT)}),chatFactory.setConfig();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
