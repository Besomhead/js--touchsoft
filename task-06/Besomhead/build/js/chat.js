var MARKUP_TIMEOUT=5e3,config={chatTitle:"Чат",chatState:"",userName:"",chatURL:"https://besomhead-chat.firebaseio.com/",cssClass:"chat-container",position:"right",allowMinimize:"true",allowDrag:"false",requireName:"false",showDateTime:"true",requests:"fetch",updates:"refetch",messagesLength:"0"},DM=function(){function e(){}return e.prototype.getDOMElement=function(e){return"string"==typeof e?document.getElementById(e):e},e.prototype.getDOMChildrenByTag=function(e,t){return Array.from(this.getDOMElement(e).getElementsByTagName(t))},e.prototype.getDOMChildrenByClass=function(e,t){return Array.from(this.getDOMElement(e).getElementsByClassName(t))},e.prototype.createDOMElement=document.createElement.bind(document),e.prototype.appendDOMElement=function(e,t){this.getDOMElement(e).appendChild(t)},e.prototype.removeDOMElement=function(e,t){this.getDOMElement(e).removeChild(this.getDOMElement(t))},e.prototype.addListener=function(e,t,n){this.getDOMElement(e).addEventListener(t,n)},e.prototype.removeListener=function(e,t,n){this.getDOMElement(e).removeEventListener(t,n)},e.prototype.addCSSClass=function(t){var n=this;Array.from(arguments).slice(1).forEach(function(e){n.getDOMElement(t).classList.add(e)})},e.prototype.removeCSSClass=function(e,t){this.getDOMElement(e).classList.remove(t)},new e}(),messageFactory=function(){function e(){}function a(e,t,n){var a,s,o;this.day=e.getDate(),this.month=e.getMonth(),this.time=(s=(a=e).getHours(),o=a.getMinutes(),(s<10?"0":"").concat(s.toString()).concat(":").concat(o<10?"0":"").concat(o.toString())),this.sender=t,this.body=n}return e.prototype.getMessage=function(e,t,n){return new a(e,t,n)},new e}(),HTTP_GET="GET",HTTP_POST="POST",HTTP_PUT="PUT",REQUEST_FETCH="fetch",REQUEST_XHR="xhr",storageManager=function(i){function e(){}function c(e,t,n){return fetch(storageManager.getStoragePath(e),(a=t,s=n,o={method:a,headers:{Accept:"application/json","Content-Type":"application/json"}},a!==HTTP_GET&&(o.body=JSON.stringify(s)),o)).then(function(e){return e.json()}).then(function(e){return e});var a,s,o}return e.prototype.getStoragePath=function(e){return i.chatURL+e+".json"},e.prototype.sendRequestToStorage=function(e,t,n){var a,s,o,r;return i.requests===REQUEST_FETCH?a=c(e,t,n):i.requests===REQUEST_XHR&&(s=e,o=t,r=n,a=new Promise(function(e,t){var n=new XMLHttpRequest;n.open(o,storageManager.getStoragePath(s),!0),n.setRequestHeader("Accept","application/json"),n.setRequestHeader("Content-Type","application/json"),n.addEventListener("load",function(){e(JSON.parse(n.response))}),n.addEventListener("error",function(){t(n.statusText)}),n.send(JSON.stringify(r))})),a},new e}(config),updatesManager=function(){function e(){this.responseData=void 0}return e.prototype.getDataFromStorage=function(e){var t=new XMLHttpRequest;t.addEventListener("readystatechange",function(){var e=t.responseText;if(this.status&&this.responseText){if(e.lastIndexOf("event:")!==e.lastIndexOf("event: put"))return;window.postMessage(JSON.parse(e.slice(e.lastIndexOf("data:")+"data:".length,e.lastIndexOf("}")+1)),window.location)}}),t.open("GET",storageManager.getStoragePath(e),!0),t.setRequestHeader("Accept","text/event-stream"),t.send()},new e}(),chatFactory=function(i){var s,t="chat-user-id",o="chat-collapsed",r="chat-expanded",u="chat",c="chat-messages",d="chat-input-box",l="chat-input-txt",M="chat-message-button",m="chat-toggle-button",p="[ ]",g="-",D=["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"],n=15e3,e="Вы",h="userName",a="chatState",f="messages",E="read",S="chat-username-prompt-container",T="chat-username-prompt-input",O="chat-username-prompt-button",C=3e3;function v(){}function y(e){return localStorage.getItem(t)+"/"+e}function w(e){i.chatState=e,storageManager.sendRequestToStorage(y(a),HTTP_PUT,e)}function L(e,t){var n=DM.createDOMElement("div");n.innerHTML=t,DM.appendDOMElement(e,n)}function b(e,t){var n,a,s,o,r;n=u.concat("-").concat(t.day).concat("-").concat(t.month),null===DM.getDOMElement(n)&&((a=DM.createDOMElement("div")).id=n,DM.addCSSClass(a,"chat-messages-container"),"true"===i.showDateTime?(DM.addCSSClass(a,"chat-messages-container-with-time"),s=e,o=t,(r=DM.createDOMElement("legend")).innerHTML=o.day.toString().concat(" ").concat(D[+o.month]),DM.addCSSClass(r,"chat-day-of-month"),DM.appendDOMElement(s,r)):"false"===i.showDateTime&&DM.addCSSClass(a,"chat-messages-container-no-time"),DM.appendDOMElement(e,a)),a=DM.getDOMElement(n),"true"===i.showDateTime&&L(a,t.time),L(a,t.sender),L(a,t.body)}function H(t,n){var e=Object.keys(n);i.messagesLength=e.length,e.forEach(function(e){b(t,n[e])})}function P(){i.chatState!==o?storageManager.sendRequestToStorage(y(f),HTTP_GET,"").then(function(t){var e=Object.keys(t).slice(1);setTimeout(P,n),t&&(i.messagesLength>=e.length||(e.slice(i.messagesLength).forEach(function(e){b(DM.getDOMElement(c),t[e])}),i.messagesLength=e.length))}):setTimeout(P,n)}function R(e){var t=e.data.data;if("/"!==e.data.path)-1===(s[e.data.path.split("/").pop()]=t).sender.indexOf(i.userName)&&i.chatState!==o&&b(DM.getDOMElement(c),t);else{if(s=t,i.chatState===o)return;chatFactory.appendMessages(DM.getDOMElement(c),s)}}function U(){var e,t,n=DM.getDOMElement(l);""!==n.value&&(e=messageFactory.getMessage(new Date,i.userName.concat(":"),n.value),n.value="",b(DM.getDOMElement(c),e),t=e,storageManager.sendRequestToStorage(y(f),HTTP_POST,t),storageManager.sendRequestToStorage(y(E),HTTP_PUT,!1))}function N(){var e;return"left"===i.position?e="chat-container-left":"right"===i.position&&(e="chat-container-right"),e}function q(e){DM.getDOMElement(l).disabled=!e,DM.getDOMElement(M).disabled=!e,null!==DM.getDOMElement(m)&&(DM.getDOMElement(m).disabled=!e)}function x(){var e,t,n,a;e=DM.createDOMElement("div"),t=DM.createDOMElement("label"),n=DM.createDOMElement("input"),a=DM.createDOMElement("button"),e.id=S,DM.addCSSClass(e,"chat-prompt-container",N()),n.id=T,DM.addCSSClass(n,"chat-prompt-input"),t.for=n.id,t.innerHTML="Пожалуйста, представьтесь:",a.id=O,DM.addCSSClass(a,"chat-prompt-button"),a.innerHTML="Сохранить",DM.appendDOMElement(e,t),DM.appendDOMElement(e,n),DM.appendDOMElement(e,a),DM.appendDOMElement(u,e),q(!1),DM.addListener(O,"click",function(){var e=DM.getDOMElement(T).value;e.length<1||(i.userName=e,DM.removeDOMElement(u,S),q(!0),storageManager.sendRequestToStorage(y(h),HTTP_PUT,i.userName))})}function _(){storageManager.sendRequestToStorage(y(h),HTTP_GET,"").then(function(e){i.userName=e}),setTimeout(function(){null!==i.userName&&void 0!==i.userName&&""!==i.userName||("true"===i.requireName?x():(i.userName=e,storageManager.sendRequestToStorage(y(h),HTTP_PUT,i.userName)))},C)}function k(){var e,t,n,a;DM.removeCSSClass(u,o),DM.addCSSClass(u,r),"true"===i.allowMinimize&&(DM.getDOMElement(m).innerHTML=g),(e=DM.createDOMElement("div")).id=c,DM.addCSSClass(e,"chat-messages-external"),DM.appendDOMElement(u,e),s&&H(DM.getDOMElement(c),s),t=DM.createDOMElement("div"),n=DM.createDOMElement("textarea"),a=DM.createDOMElement("button"),t.id=d,DM.addCSSClass(t,"chat-input-container"),n.id=l,DM.addCSSClass(n,"chat-input-textarea"),DM.appendDOMElement(t,n),a.id=M,DM.addCSSClass(a,"chat-message-button"),a.innerHTML="Отправить",DM.addListener(a,"click",U),DM.appendDOMElement(t,a),DM.appendDOMElement(u,t),""!==i.userName&&null!==i.userName&&void 0!==i.userName||_(),w(r)}function I(){storageManager.sendRequestToStorage(y(a),HTTP_GET,"").then(function(e){i.chatState=e}),setTimeout(function(){null===i.chatState||void 0===i.chatState||""===i.chatState?w(o):i.chatState===r&&k(),DM.addCSSClass(u,i.chatState)},C)}function F(){switch(i.chatState){case o:k();break;case r:i.messagesLength=0,DM.removeCSSClass(u,r),DM.addCSSClass(u,o),DM.getDOMElement(m).innerHTML=p,DM.removeDOMElement(u,c),DM.removeDOMElement(u,d),w(o);break;default:throw new Error("Unexpected key/value pair: "+u+"/"+i.chatState)}}function j(d){DM.addListener(d,"mousedown",function(e){var t,n,a,s=DM.getDOMElement(u),o={top:(t=s.getBoundingClientRect()).top+window.pageYOffset,left:t.left+window.pageXOffset},r=e.pageX-o.left,i=e.pageY-o.top;function c(e){s.style.left=e.pageX-r+"px",s.style.top=e.pageY-i+"px"}"BUTTON"!==e.target.tagName&&(n=function(e){c(e)},a=function(){DM.removeListener(document,"mousemove",n),DM.removeListener(d,"mouseup",a)},c(e),DM.addListener(document,"mousemove",n),DM.addListener(d,"mouseup",a))}),DM.addListener(d,"dragstart",function(){return!1})}return v.prototype.appendMessages=function(t,e){e?H(t,e):storageManager.sendRequestToStorage(y(f),HTTP_GET,"").then(function(e){e&&H(t,e)})},v.prototype.subscribeOnUpdates=function(){"refetch"===i.updates?P():"longPolling"===i.updates&&(window.addEventListener("message",R),updatesManager.getDataFromStorage(y(f)))},v.prototype.appendStylesheet=function(){var e=DM.createDOMElement("link");e.rel="stylesheet",e.type="text/css",e.href="https://rawgit.com/Besomhead/js--touchsoft/besomhead-task05/task-05/Besomhead/build/css/chat_styles.css",DM.appendDOMElement(document.head,e)},v.prototype.createChatMarkup=function(){var e,t,n=DM.createDOMElement("fieldset"),a=DM.createDOMElement("legend"),s=DM.createDOMElement("div");n.id=u,DM.addCSSClass(n,"chat-container",N(),i.cssClass),a.innerHTML=i.chatTitle,DM.addCSSClass(a,"chat-legend"),n.appendChild(a),DM.addCSSClass(s,"chat-toggle-button-container"),"true"===i.allowDrag&&(DM.addCSSClass(s,"chat-toggle-button-container-drag"),j(s)),"true"===i.allowMinimize?(e=s,t=DM.createDOMElement("button"),DM.addCSSClass(t,m),t.id=m,t.innerHTML=i.chatState===r?g:p,DM.addListener(t,"click",F),DM.appendDOMElement(e,t)):"false"===i.allowMinimize&&w(r),DM.appendDOMElement(n,s),DM.appendDOMElement(document.body,n),I()},v.prototype.setConfig=function(){var e,t,n=(e=document.currentScript.src).substr(e.indexOf("?")+1).split("&").reduce(function(e,t){var n=t.split("="),a=decodeURIComponent(n[1]);return e[decodeURIComponent(n[0])]=a.substr(1,a.length-2),e},{});Object.keys(n).forEach(function(e){""!==(t=n[e])&&(i[e]=t)})},v.prototype.setUniqueUserID=function(){null===localStorage.getItem(t)&&localStorage.setItem(t,"user".concat(Date.now().toString()))},new v}(config);window.addEventListener("load",function(){chatFactory.appendStylesheet(),chatFactory.setUniqueUserID(),chatFactory.createChatMarkup(),setTimeout(chatFactory.subscribeOnUpdates,MARKUP_TIMEOUT)}),chatFactory.setConfig();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
