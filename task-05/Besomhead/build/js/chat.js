var config={chatTitle:"Чат",chatState:"",userName:"",chatURL:"https://besomhead-chat.firebaseio.com/",cssClass:"chat-container",position:"right",allowMinimize:"true",allowDrag:"false",requireName:"false",showDateTime:"true",requests:"fetch",messagesLength:"0"},DM=function(){return this.getDOMElement=function(e){return"string"==typeof e?document.getElementById(e):e},this.getDOMChildrenByTag=function(e,t){return Array.from(this.getDOMElement(e).getElementsByTagName(t))},this.getDOMChildrenByClass=function(e,t){return Array.from(this.getDOMElement(e).getElementsByClassName(t))},this.createDOMElement=document.createElement.bind(document),this.appendDOMElement=function(e,t){this.getDOMElement(e).appendChild(t)},this.removeDOMElement=function(e,t){this.getDOMElement(e).removeChild(this.getDOMElement(t))},this.addListener=function(e,t,n){this.getDOMElement(e).addEventListener(t,n)},this.removeListener=function(e,t,n){this.getDOMElement(e).removeEventListener(t,n)},this.addCSSClass=function(t){var n=this;Array.from(arguments).slice(1).forEach(function(e){n.getDOMElement(t).classList.add(e)})},this.removeCSSClass=function(e,t){this.getDOMElement(e).classList.remove(t)},this}(),messageFactory=function(){function a(e,t,n){var a,s,r;this.day=e.getDate(),this.month=e.getMonth(),this.time=(s=(a=e).getHours(),r=a.getMinutes(),(s<10?"0":"").concat(s.toString()).concat(":").concat(r<10?"0":"").concat(r.toString())),this.sender=t,this.body=n}return this.getMessage=function(e,t,n){return new a(e,t,n)},this}(),HTTP_GET="GET",HTTP_POST="POST",HTTP_PUT="PUT",REQUEST_FETCH="fetch",REQUEST_XHR="xhr",storageManager=function(i){function c(e){return i.chatURL+e+".json"}function l(e,t,n){return fetch(c(e),(a=t,s=n,r={method:a,headers:{Accept:"application/json","Content-Type":"application/json"}},a!==HTTP_GET&&(r.body=JSON.stringify(s)),r)).then(function(e){return e.json()}).then(function(e){return e});var a,s,r}return this.sendRequestToStorage=function(e,t,n){var a,s,r,o;return i.requests===REQUEST_FETCH?a=l(e,t,n):i.requests===REQUEST_XHR&&(s=e,r=t,o=n,a=new Promise(function(e,t){var n=new XMLHttpRequest;n.open(r,c(s),!0),n.setRequestHeader("Accept","application/json"),n.setRequestHeader("Content-Type","application/json"),n.addEventListener("load",function(){e(JSON.parse(n.response))}),n.addEventListener("error",function(){t(n.statusText)}),n.send(JSON.stringify(o))})),a},this}(config),chatFactory=function(i){var t="chat-user-id",a="chat-collapsed",r="chat-expanded",d="chat",s="chat-messages",o="chat-input-box",c="chat-input-txt",l="chat-message-button",u="chat-toggle-button",M="[ ]",m="-",D=["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"],h=15e3,e="Вы",g="userName",n="chatState",p="messages",f="read",E="chat-username-prompt-container",S="chat-username-prompt-input",T="chat-username-prompt-button",O=1e3;function C(e){return localStorage.getItem(t)+"/"+e}function v(e){i.chatState=e,storageManager.sendRequestToStorage(C(n),HTTP_PUT,e)}function y(e,t){var n=DM.createDOMElement("div");n.innerHTML=t,DM.appendDOMElement(e,n)}function L(e,t){var n,a,s,r,o;n=d.concat("-").concat(t.day).concat("-").concat(t.month),null===DM.getDOMElement(n)&&((a=DM.createDOMElement("div")).id=n,DM.addCSSClass(a,"chat-messages-container"),"true"===i.showDateTime?(DM.addCSSClass(a,"chat-messages-container-with-time"),s=e,r=t,(o=DM.createDOMElement("legend")).innerHTML=r.day.toString().concat(" ").concat(D[+r.month]),DM.addCSSClass(o,"chat-day-of-month"),DM.appendDOMElement(s,o)):"false"===i.showDateTime&&DM.addCSSClass(a,"chat-messages-container-no-time"),DM.appendDOMElement(e,a)),a=DM.getDOMElement(n),"true"===i.showDateTime&&y(a,t.time),y(a,t.sender),y(a,t.body)}function b(){var a,e=DM.createDOMElement("div");e.id=s,DM.addCSSClass(e,"chat-messages-external"),DM.appendDOMElement(d,e),a=e,storageManager.sendRequestToStorage(C(p),HTTP_GET,"").then(function(e){var t,n;if(e)for(n=Object.keys(e),i.messagesLength=n.length,t=0;t<n.length;t+=1)L(a,e[n[t]])})}function H(){storageManager.sendRequestToStorage(C(p),HTTP_GET,"").then(function(t){var e=Object.keys(t).slice(1);t&&(i.messagesLength>=e.length||(e.slice(i.messagesLength).forEach(function(e){L(DM.getDOMElement(s),t[e])}),i.messagesLength=e.length))})}function w(){var e,t,n=DM.getDOMElement(c);""!==n.value&&(e=messageFactory.getMessage(new Date,i.userName.concat(":"),n.value),n.value="",L(DM.getDOMElement(s),e),t=e,storageManager.sendRequestToStorage(C(p),HTTP_POST,t),storageManager.sendRequestToStorage(C(f),HTTP_PUT,!1),setInterval(H,h))}function R(){var e;return"left"===i.position?e="chat-container-left":"right"===i.position&&(e="chat-container-right"),e}function N(e){DM.getDOMElement(c).disabled=!e,DM.getDOMElement(l).disabled=!e,null!==DM.getDOMElement(u)&&(DM.getDOMElement(u).disabled=!e)}function P(){var e,t,n,a;e=DM.createDOMElement("div"),t=DM.createDOMElement("label"),n=DM.createDOMElement("input"),a=DM.createDOMElement("button"),e.id=E,DM.addCSSClass(e,"chat-prompt-container",R()),n.id=S,DM.addCSSClass(n,"chat-prompt-input"),t.for=n.id,t.innerHTML="Пожалуйста, представьтесь:",a.id=T,DM.addCSSClass(a,"chat-prompt-button"),a.innerHTML="Сохранить",DM.appendDOMElement(e,t),DM.appendDOMElement(e,n),DM.appendDOMElement(e,a),DM.appendDOMElement(d,e),N(!1),DM.addListener(T,"click",function(){var e=DM.getDOMElement(S).value;e.length<1||(i.userName=e,DM.removeDOMElement(d,E),N(!0),storageManager.sendRequestToStorage(C(g),HTTP_PUT,i.userName))})}function q(){storageManager.sendRequestToStorage(C(g),HTTP_GET,"").then(function(e){i.userName=e}),setTimeout(function(){null!==i.userName&&void 0!==i.userName&&""!==i.userName||("true"===i.requireName?P():(i.userName=e,storageManager.sendRequestToStorage(C(g),HTTP_PUT,i.userName)))},O)}function U(){var e,t,n;DM.removeCSSClass(d,a),DM.addCSSClass(d,r),"true"===i.allowMinimize&&(DM.getDOMElement(u).innerHTML=m),b(),e=DM.createDOMElement("div"),t=DM.createDOMElement("textarea"),n=DM.createDOMElement("button"),e.id=o,DM.addCSSClass(e,"chat-input-container"),t.id=c,DM.addCSSClass(t,"chat-input-textarea"),DM.appendDOMElement(e,t),n.id=l,DM.addCSSClass(n,"chat-message-button"),n.innerHTML="Отправить",DM.addListener(n,"click",w),DM.appendDOMElement(e,n),DM.appendDOMElement(d,e),""!==i.userName&&null!==i.userName&&void 0!==i.userName||q(),v(r)}function _(){storageManager.sendRequestToStorage(C(n),HTTP_GET,"").then(function(e){i.chatState=e}),setTimeout(function(){null===i.chatState||void 0===i.chatState||""===i.chatState?v(a):i.chatState===r&&U(),DM.addCSSClass(d,i.chatState)},O)}function k(){switch(i.chatState){case a:U();break;case r:DM.removeCSSClass(d,r),DM.addCSSClass(d,a),DM.getDOMElement(u).innerHTML=M,DM.removeDOMElement(d,s),DM.removeDOMElement(d,o),v(a);break;default:throw new Error("Unexpected key/value pair: "+d+"/"+i.chatState)}}function x(l){DM.addListener(l,"mousedown",function(e){var t,n,a,s=DM.getDOMElement(d),r={top:(t=s.getBoundingClientRect()).top+window.pageYOffset,left:t.left+window.pageXOffset},o=e.pageX-r.left,i=e.pageY-r.top;function c(e){s.style.left=e.pageX-o+"px",s.style.top=e.pageY-i+"px"}"BUTTON"!==e.target.tagName&&(n=function(e){c(e)},a=function(){DM.removeListener(document,"mousemove",n),DM.removeListener(l,"mouseup",a)},c(e),DM.addListener(document,"mousemove",n),DM.addListener(l,"mouseup",a))}),DM.addListener(l,"dragstart",function(){return!1})}return this.appendStylesheet=function(){var e=DM.createDOMElement("link");e.rel="stylesheet",e.type="text/css",e.href="https://rawgit.com/Besomhead/js--touchsoft/besomhead-task05/task-05/Besomhead/src/css/chat_styles.css",DM.appendDOMElement(document.head,e)},this.createChatMarkup=function(){var e,t,n=DM.createDOMElement("fieldset"),a=DM.createDOMElement("legend"),s=DM.createDOMElement("div");n.id=d,DM.addCSSClass(n,"chat-container",R(),i.cssClass),a.innerHTML=i.chatTitle,DM.addCSSClass(a,"chat-legend"),n.appendChild(a),DM.addCSSClass(s,"chat-toggle-button-container"),"true"===i.allowDrag&&(DM.addCSSClass(s,"chat-toggle-button-container-drag"),x(s)),"true"===i.allowMinimize?(e=s,t=DM.createDOMElement("button"),DM.addCSSClass(t,u),t.id=u,t.innerHTML=i.chatState===r?m:M,DM.addListener(t,"click",k),DM.appendDOMElement(e,t)):"false"===i.allowMinimize&&v(r),DM.appendDOMElement(n,s),DM.appendDOMElement(document.body,n),_()},this.setConfig=function(){var e,t,n=(e=document.currentScript.src).substr(e.indexOf("?")+1).split("&").reduce(function(e,t){var n=t.split("="),a=decodeURIComponent(n[1]);return e[decodeURIComponent(n[0])]=a.substr(1,a.length-2),e},{});Object.keys(n).forEach(function(e){""!==(t=n[e])&&(i[e]=t)})},this.setUniqueUserID=function(){null===localStorage.getItem(t)&&localStorage.setItem(t,"user".concat(Date.now().toString()))},this}(config);window.addEventListener("load",function(){chatFactory.appendStylesheet(),chatFactory.setUniqueUserID(),chatFactory.createChatMarkup()}),chatFactory.setConfig();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
